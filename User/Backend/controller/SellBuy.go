package controller

import (
	"landchain/config" // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô path ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Go bindings ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÄ‡∏ä‡πà‡∏ô "contract" ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå go ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å abigen
	"landchain/entity" // ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠ module ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ñ‡∏∏‡∏ì
	"landchain/services"
	"strings"
	"time"

	"log"
	"net/http"

	"strconv"

	"github.com/gin-gonic/gin"
)

// GetBookings ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
// GetAllPostLandData ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏â‡∏ô‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô (Landtitle)

func GetAllLandTitleByUserID(c *gin.Context) {
	db := config.DB()

	// ‡∏£‡∏±‡∏ö user_id ‡∏à‡∏≤‡∏Å query param
	userIDStr := c.Param("id")
	if userIDStr == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ user_id"})
		return
	}

	userID, err := strconv.Atoi(userIDStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "user_id ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç"})
		return
	}

	var lands []entity.Landtitle

	// preload ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Geography / Province / Amphure / Tambon
	if err := db.Preload("Geography").
		Preload("Province").
		Preload("Amphure").
		Preload("Tambon").
		Preload("Status").
		Where("user_id = ?", userID).
		Find(&lands).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"landtitles": lands})
}

func CreateTransaction(c *gin.Context) {
	var transaction entity.Transaction

	// ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å request body
	if err := c.ShouldBindJSON(&transaction); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
		return
	}

	db := config.DB()

	// ‡πÅ‡∏õ‡∏•‡∏á query params ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
	landIDStr := c.Query("landID")
	landID, err := strconv.ParseUint(landIDStr, 10, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "LandID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
		return
	}
	transaction.LandID = uint(landID)

	sellerIDStr := c.Query("sellerID")
	sellerID, err := strconv.ParseUint(sellerIDStr, 10, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "SellerID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
		return
	}
	transaction.SellerID = uint(sellerID)

	buyerIDStr := c.Query("buyerID")
	buyerID, err := strconv.ParseUint(buyerIDStr, 10, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "BuyerID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
		return
	}
	transaction.BuyerID = uint(buyerID)

	amountStr := c.Query("amount")
	amount, err := strconv.ParseFloat(amountStr, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Amount ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
		return
	}
	transaction.Amount = amount

	// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Landtitle ‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	var land entity.Landtitle
	if err := db.First(&land, transaction.LandID).Error; err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏â‡∏ô‡∏î"})
		return
	}
	if land.IsLocked {
		c.JSON(http.StatusForbidden, gin.H{"error": "‡πÇ‡∏â‡∏ô‡∏î‡∏ô‡∏µ‡πâ‡∏°‡∏µ Transaction ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"})
		return
	}

	// ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
	transaction.TypetransactionID = 1
	transaction.BuyerAccepted = true
	transaction.SellerAccepted = false
	transaction.MoneyChecked = false
	transaction.LandDepartmentApproved = false
	transaction.Expire = time.Now().Add(72 * time.Hour) // 3 ‡∏ß‡∏±‡∏ô

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á Transaction
	if err := db.Create(&transaction).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ"})
		return
	}

	// üîπ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Landtitle ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡πá‡∏≠‡∏Å
	land.IsLocked = true
	if err := db.Save(&land).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡∏™‡∏£‡πâ‡∏≤‡∏á Transaction ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πá‡∏≠‡∏Å‡πÇ‡∏â‡∏ô‡∏î‡πÑ‡∏î‡πâ"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"transaction": transaction, "land": land})
}

func UpdateTransactionLandDepartmentAccept(c *gin.Context) {
	// ‡∏£‡∏±‡∏ö ID ‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å URL parameter
	transactionID := c.Param("id")

	// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	db := config.DB()

	// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
	var existingTransaction entity.Transaction
	if err := db.First(&existingTransaction, "id = ?", transactionID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"})
		return
	}

	// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LandDepartmentApproved ‡πÄ‡∏õ‡πá‡∏ô true ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
	existingTransaction.LandDepartmentApproved = true

	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	if err := db.Save(&existingTransaction).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ"})
		return
	}

	// ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
	c.JSON(http.StatusOK, gin.H{"transaction": existingTransaction})
}

func CheckTransactionStatusAndTriggerContract() {
	// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	db := config.DB()

	// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏£‡∏ö
	var transactions []entity.Transaction
	err := db.Where("buyer_accepted = ? AND seller_accepted = ? AND land_department_approved = ?", true, true, true).Find(&transactions).Error
	if err != nil {
		log.Println("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°:", err)
		return
	}

	// ‡∏´‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
	for _, transaction := range transactions {
		// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô trigger smart contract
		triggerSmartContract(transaction)
	}
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô trigger smart contract
func triggerSmartContract(transaction entity.Transaction) {
	// ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å smart contract ‡∏ú‡πà‡∏≤‡∏ô Web3

	log.Println("Smart contract called successfully, transaction hash:")
}

func GetAllTransation(c *gin.Context) {
	var Transaction []entity.Transaction
	db := config.DB()

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
	if err := db.Find(&Transaction).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ"})
		return
	}

	c.JSON(http.StatusOK, Transaction)
}

func GetInfoUserByWalletID(c *gin.Context) {
	var User []entity.Users
	walletValue, exists := c.Get("wallet")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "wallet not found"})
		return
	}

	walletAddr, ok := walletValue.(string)
	if !ok || walletAddr == "" {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "wallet invalid"})
		return
	}
	db := config.DB()

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
	if err := db.First(&User).Where("metamaskaddress = ?", walletAddr).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ"})
		return
	}

	c.JSON(http.StatusOK, User)
}

func GetLandInfoByTokenID(c *gin.Context) {
	var Land []entity.Landtitle
	TokenID := c.Param("id")
	db := config.DB()

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
	if err := db.Preload("Geography").
		Preload("Province").
		Preload("Amphure").
		Preload("Tambon").Where("land_token = ?", TokenID).First(&Land).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏â‡∏•‡∏î‡πÑ‡∏î‡πâ"})
		return
	}

	c.JSON(http.StatusOK, Land)
}

func GetInfoUserByToken(c *gin.Context) {
	// ‡∏î‡∏∂‡∏á wallet ‡∏à‡∏≤‡∏Å context ‡∏ó‡∏µ‡πà middleware ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
	wallet, exists := c.Get("wallet")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "wallet not found in token"})
		return
	}

	db := config.DB()

	var user entity.Users
	if err := db.Where("metamaskaddress = ?", wallet.(string)).First(&user).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "User not found"})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"id":             user.ID,
		"first_name":     user.Firstname,
		"last_name":      user.Lastname,
		"email":          user.Email,
		"wallet_address": user.Metamaskaddress,
	})
}

func GetRequestBuybyLandID(c *gin.Context) {
	var request []entity.RequestBuySell
	landID := c.Param("id")
	db := config.DB()

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
	if err := db.Where("land_id = ?", landID).Preload("Seller").Preload("Buyer").Preload("RequestBuySellType").Find(&request).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ"})
		return
	}

	c.JSON(http.StatusOK, request)
}

func DeleteRequestBuyByUserIDAndLandID(c *gin.Context) {
	landIDStr := c.Query("landID")
	userIDStr := c.Query("userID")

	if landIDStr == "" || userIDStr == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ landID ‡πÅ‡∏•‡∏∞ userID"})
		return
	}

	landID, err1 := strconv.Atoi(landIDStr)
	userID, err2 := strconv.Atoi(userIDStr)
	if err1 != nil || err2 != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "landID ‡πÅ‡∏•‡∏∞ userID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç"})
		return
	}

	db := config.DB()

	if err := db.Where("land_id = ? AND buyer_id = ?", landID, userID).Delete(&entity.RequestBuySell{}).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ", "detail": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"})
}

// ‡∏™‡∏°‡∏°‡∏ï‡∏¥ contractInstance ‡∏ñ‡∏π‡∏Å init ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô global

func SetSellInfoHandler(c *gin.Context) {
	var req struct {
		TokenID  int     `json:"tokenId"`
		PriceTHB float64 `json:"priceTHB"`
		Buyer    string  `json:"buyer"`
	}

	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid request: " + err.Error()})
		return
	}

	signature, wei, err := services.SignLandSalePacked(req.TokenID, req.PriceTHB, req.Buyer)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"tokenId":   req.TokenID,
		"wei":       wei, // ‚úÖ wei ‡πÅ‡∏•‡πâ‡∏ß
		"buyer":     req.Buyer,
		"signature": signature,
	})
}

func DeleteAllRequestBuy(c *gin.Context) {
	landIDStr := c.Query("landID")

	if landIDStr == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ landID ‡πÅ‡∏•‡∏∞ userID"})
		return
	}

	landID, err1 := strconv.Atoi(landIDStr)
	if err1 != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "landID ‡πÅ‡∏•‡∏∞ userID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç"})
		return
	}

	db := config.DB()

	if err := db.Where("land_id = ? ", landID).Delete(&entity.RequestBuySell{}).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ", "detail": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"})
}

func GetInfoUsersByWallets(c *gin.Context) {
	var wallets []string
	if err := c.BindJSON(&wallets); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á wallet ‡πÄ‡∏õ‡πá‡∏ô array"})
		return
	}

	// ‡πÅ‡∏õ‡∏•‡∏á wallets ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô lowercase
	for i := range wallets {
		wallets[i] = strings.ToLower(wallets[i])
	}

	var users []entity.Users
	db := config.DB()

	// ‡πÉ‡∏ä‡πâ LOWER ‡πÉ‡∏ô query ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ match case-insensitive
	if err := db.Where("LOWER(metamaskaddress) IN ?", wallets).Find(&users).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ"})
		return
	}

	if len(users) == 0 {
		c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"})
		return
	}

	c.JSON(http.StatusOK, users)
}

func DeleteAllRequestBuyByLandID(c *gin.Context) {
	landIDStr := c.Query("landID")


	if landIDStr == ""{
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ landID ‡πÅ‡∏•‡∏∞ userID"})
		return
	}

	landID, err1 := strconv.Atoi(landIDStr)

	if err1 != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "landID ‡πÅ‡∏•‡∏∞ userID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç"})
		return
	}

	db := config.DB()

	if err := db.Where("land_id = ?", landID).Delete(&entity.RequestBuySell{}).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ", "detail": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"})
}