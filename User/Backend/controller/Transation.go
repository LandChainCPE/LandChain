package controller

import (
	"math/big"
	"net/http"
	"strconv"
	"strings"

	"landchain/config"
	"landchain/entity"

	"github.com/ethereum/go-ethereum/common"
	"github.com/gin-gonic/gin"
)

func GetTransationByUserID(c *gin.Context) {

	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid user id"})
		return
	}
	var transactions []entity.Transaction
	db := config.DB()

	err = db.Preload("Landtitle").
		Preload("Buyer").
		Preload("Seller").
		Preload("Typetransaction").
		Where("(seller_id = ? OR buyer_id = ?) AND deleted_at IS NULL", id, id).
		Find(&transactions).Error
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ"})
		return
	}

	c.JSON(http.StatusOK, transactions)
}

func UpdateTransactionBuyerAccept(c *gin.Context) {
	sellerId := c.Query("sellerID")
	buyerId := c.Query("buyerID")
	landId := c.Query("landID")

	if sellerId == "" || buyerId == "" || landId == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "sellerID, buyerID ‡πÅ‡∏•‡∏∞ landID ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"})
		return
	}

	db := config.DB()

	// --- ‡∏î‡∏∂‡∏á walletAddress ‡∏Ç‡∏≠‡∏á Seller ---
	var seller entity.Users
	if err := db.First(&seller, "id = ?", sellerId).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢"})
		return
	}
	walletAddress := common.HexToAddress(seller.Metamaskaddress)

	// --- ‡∏î‡∏∂‡∏á tokenID ‡∏Ç‡∏≠‡∏á Land ‡∏à‡∏≤‡∏Å LandTitle ---
	var land entity.Landtitle
	if err := db.First(&land, "id = ? AND is_locked = true", landId).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô"})
		return
	}

	tokenId := new(big.Int)
	if _, ok := tokenId.SetString(strconv.Itoa(int(*land.TokenID)), 10); !ok {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid tokenId"})
		return
	}

	// --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö owner ‡πÉ‡∏ô Smart Contract ---
	if ContractInstance == nil {
		c.JSON(http.StatusServiceUnavailable, gin.H{"error": "contract not initialized"})
		return
	}

	owner, err := ContractInstance.Contract.OwnerOf(&ContractInstance.CallOpts, tokenId)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ", "detail": err.Error()})
		return
	}

	if owner != walletAddress {
		c.JSON(http.StatusForbidden, gin.H{"error": "seller ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô‡∏ô‡∏µ‡πâ"})
		return
	}

	// --- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡πà‡∏≠‡∏¢ Update Transaction ---
	var existingTransaction entity.Transaction
	if err := db.First(&existingTransaction, "seller_id = ? AND buyer_id = ? AND land_id = ? AND deleted_at IS NULL", sellerId, buyerId, landId).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"})
		return
	}

	existingTransaction.BuyerAccepted = true

	if err := db.Save(&existingTransaction).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ"})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message":     "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
		"transaction": existingTransaction,
	})
}

func DeleteTransactionTodelete(c *gin.Context) {
	transactionIDStr := c.Param("id")

	if transactionIDStr == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ transactionID"})
		return
	}

	transactionID, err := strconv.Atoi(transactionIDStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "transactionID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç"})
		return
	}

	db := config.DB()

	// 0Ô∏è‚É£ ‡∏î‡∏∂‡∏á Transaction ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏π‡πâ TokenID
	var tx entity.Transaction
	if err := db.First(&tx, transactionID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ"})
		return
	}

	// 1Ô∏è‚É£ ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢ TokenID
	if tx.LandID != 0 {
		if err := db.Model(&entity.Landtitle{}).
			Where("id = ?", tx.LandID).
			Update("is_locked", false).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÇ‡∏â‡∏ô‡∏î‡πÑ‡∏î‡πâ", "detail": err.Error()})
			return
		}
	}

	// 2Ô∏è‚É£ Update typetransaction_id
	if err := db.Model(&entity.Transaction{}).
		Where("id = ?", transactionID).
		Update("typetransaction_id", 2).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ", "detail": err.Error()})
		return
	}

	// 3Ô∏è‚É£ Delete Transaction
	if err := db.Where("id = ?", transactionID).
		Delete(&entity.Transaction{}).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ", "detail": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÇ‡∏â‡∏ô‡∏î ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï typetransaction ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
	})
}

func DeleteTransactionToscucess(c *gin.Context) {
	transactionIDStr := c.Param("id")

	if transactionIDStr == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ transactionID"})
		return
	}

	transactionID, err := strconv.Atoi(transactionIDStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "transactionID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç"})
		return
	}

	db := config.DB()

	// 1Ô∏è‚É£ Update typetransaction_id ‡∏Å‡πà‡∏≠‡∏ô
	if err := db.Model(&entity.Transaction{}).
		Where("id = ?", transactionID).
		Update("typetransaction_id", 5).
		Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ", "detail": err.Error()})
		return
	}

	// 2Ô∏è‚É£ Delete record ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å update
	if err := db.Where("id = ?", transactionID).
		Delete(&entity.Transaction{}).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ", "detail": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï typetransaction ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"})
}

func DeleteTransactionandAllrequest(c *gin.Context) {
	transactionIDStr := c.Param("id")

	if transactionIDStr == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ transactionID"})
		return
	}

	transactionID, err := strconv.Atoi(transactionIDStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "transactionID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç"})
		return
	}

	db := config.DB()

	// 1Ô∏è‚É£ ‡∏´‡∏≤ transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á LandID
	var tx entity.Transaction
	if err := db.First(&tx, transactionID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö transaction", "detail": err.Error()})
		return
	}

	landID := tx.LandID // ‚úÖ ‡πÉ‡∏ä‡πâ LandID ‡∏à‡∏≤‡∏Å transaction

	// 2Ô∏è‚É£ Update typetransaction_id ‡∏Å‡πà‡∏≠‡∏ô
	if err := db.Model(&entity.Transaction{}).
		Where("id = ?", transactionID).
		Update("typetransaction_id", 2).
		Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ", "detail": err.Error()})
		return
	}

	// 3Ô∏è‚É£ Delete transaction
	if err := db.Where("id = ?", transactionID).Delete(&entity.Transaction{}).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö transaction ‡πÑ‡∏î‡πâ", "detail": err.Error()})
		return
	}

	// 4Ô∏è‚É£ Delete all requests by LandID
	if landID != 0 {
		if err := db.Where("land_id = ?", landID).Delete(&entity.RequestBuySell{}).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö requests ‡πÑ‡∏î‡πâ", "detail": err.Error()})
			return
		}
	}

	c.JSON(http.StatusOK, gin.H{"message": "‡∏•‡∏ö transaction ‡πÅ‡∏•‡∏∞ request ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"})
}

func LoadUpdateSetsale(c *gin.Context) {
	transactionIDStr := c.Param("id")

	if transactionIDStr == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ transactionID"})
		return
	}

	transactionID, err := strconv.Atoi(transactionIDStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "transactionID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç"})
		return
	}

	db := config.DB()

	// 1Ô∏è‚É£ ‡∏´‡∏≤ transaction (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö)
	var tx entity.Transaction
	if err := db.Where("id = ? AND deleted_at IS NULL", transactionID).First(&tx).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö transaction ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", "detail": err.Error()})
		return
	}

	// üö® ‡∏ñ‡πâ‡∏≤ typetransaction_id = 4 ‚Üí return ‡πÄ‡∏•‡∏¢
	if tx.TypetransactionID == 4 {
		c.JSON(http.StatusOK, gin.H{
			"transactionID": transactionID,
			"landID":        tx.LandID,
			"message":       "‡πÑ‡∏°‡πà‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Smart Contract ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å on chain ‡πÅ‡∏•‡πâ‡∏ß",
		})
		return
	}

	// 2Ô∏è‚É£ ‡∏î‡∏∂‡∏á Landtitle
	var landData entity.Landtitle
	if err := db.Where("id = ?", tx.LandID).First(&landData).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á Landtitle ‡πÑ‡∏î‡πâ", "detail": err.Error()})
		return
	}

	if landData.TokenID == nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Landtitle ‡πÑ‡∏°‡πà‡∏°‡∏µ TokenID"})
		return
	}
	tokenID := big.NewInt(int64(*landData.TokenID))

	// 3Ô∏è‚É£ ‡∏î‡∏∂‡∏á Metadata ‡∏à‡∏≤‡∏Å SmartContract
	meta, err := ContractInstance.GetLandMetadata(tokenID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡∏î‡∏∂‡∏á Metadata ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "detail": err.Error()})
		return
	}

	// 4Ô∏è‚É£ ‡∏î‡∏∂‡∏á Wallet ‡∏Ç‡∏≠‡∏á Buyer/Seller ‡∏à‡∏≤‡∏Å DB
	var buyer entity.Users
	if err := db.First(&buyer, tx.BuyerID).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á Buyer ‡πÑ‡∏î‡πâ", "detail": err.Error()})
		return
	}

	var seller entity.Users
	if err := db.First(&seller, tx.SellerID).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á Seller ‡πÑ‡∏î‡πâ", "detail": err.Error()})
		return
	}

	// 5Ô∏è‚É£ ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Wallet DB ‡∏Å‡∏±‡∏ö Blockchain
	updated := false
	if strings.EqualFold(buyer.Metamaskaddress, meta.Buyer.Hex()) &&
		strings.EqualFold(seller.Metamaskaddress, meta.WalletID.Hex()) {
		// Update TypetransactionID = 4
		if err := db.Model(&tx).Update("typetransaction_id", 4).Error; err == nil {
			updated = true
		}
	}

	// 6Ô∏è‚É£ ‡∏™‡πà‡∏á Response
	c.JSON(http.StatusOK, gin.H{
		"transactionID": transactionID,
		"landID":        tx.LandID,
		"tokenID":       tokenID.String(),
		"metaFields":    meta.MetaFields,
		"price":         meta.Price.String(),
		"buyer":         meta.Buyer.Hex(),
		"walletID":      meta.WalletID.Hex(),
		"updated":       updated,
	})
}

func LoadTransactionAfterBuy(c *gin.Context) {
	transactionIDStr := c.Param("id")

	if transactionIDStr == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ transactionID"})
		return
	}

	transactionID, err := strconv.Atoi(transactionIDStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "transactionID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç"})
		return
	}

	db := config.DB()

	// 1Ô∏è‚É£ ‡∏´‡∏≤ transaction (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö)
	var tx entity.Transaction
	if err := db.Where("id = ? AND deleted_at IS NULL", transactionID).First(&tx).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö transaction ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", "detail": err.Error()})
		return
	}

	// üö® ‡∏ñ‡πâ‡∏≤ typetransaction_id = 5 ‚Üí return ‡πÄ‡∏•‡∏¢
	if tx.TypetransactionID == 5 {
		c.JSON(http.StatusOK, gin.H{
			"transactionID": transactionID,
			"landID":        tx.LandID,
			"message":       "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á Smart Contract",
		})
		return
	}

	// 2Ô∏è‚É£ ‡∏î‡∏∂‡∏á Landtitle
	var landData entity.Landtitle
	if err := db.Where("id = ?", tx.LandID).First(&landData).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á Landtitle ‡πÑ‡∏î‡πâ", "detail": err.Error()})
		return
	}

	if landData.TokenID == nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Landtitle ‡πÑ‡∏°‡πà‡∏°‡∏µ TokenID"})
		return
	}
	tokenID := big.NewInt(int64(*landData.TokenID))

	// 3Ô∏è‚É£ ‡∏î‡∏∂‡∏á history ownership ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 2 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
	history, err := ContractInstance.GetOwnershipHistory(tokenID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡∏î‡∏∂‡∏á Ownership History ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "detail": err.Error()})
		return
	}

	if len(history) < 2 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Ownership History ‡∏°‡∏µ‡πÑ‡∏°‡πà‡∏û‡∏≠"})
		return
	}

	// ‡πÄ‡∏≠‡∏≤ 2 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
	latestHistory := history[len(history)-2:]

	// 4Ô∏è‚É£ ‡∏î‡∏∂‡∏á wallet ‡∏Ç‡∏≠‡∏á Buyer/Seller
	var buyer entity.Users
	if err := db.First(&buyer, tx.BuyerID).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á Buyer ‡πÑ‡∏î‡πâ", "detail": err.Error()})
		return
	}

	var seller entity.Users
	if err := db.First(&seller, tx.SellerID).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á Seller ‡πÑ‡∏î‡πâ", "detail": err.Error()})
		return
	}

	// 5Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö wallet (latestHistory[0] = ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤, latestHistory[1] = ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
	if strings.EqualFold(latestHistory[0].Hex(), seller.Metamaskaddress) &&
		strings.EqualFold(latestHistory[1].Hex(), buyer.Metamaskaddress) {

		// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó TypetransactionID = 5
		if err := db.Model(&tx).Update("typetransaction_id", 5).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó TypetransactionID ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "detail": err.Error()})
			return
		}

		// 6Ô∏è‚É£ Soft delete transaction ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
		if err := db.Delete(&tx).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "soft delete transaction ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "detail": err.Error()})
			return
		}

		c.JSON(http.StatusOK, gin.H{
			"transactionID": transactionID,
			"landID":        tx.LandID,
			"message":       "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡∏∞‡∏•‡∏ö transaction ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
			"history":       latestHistory,
		})
		return
	}

	c.JSON(http.StatusBadRequest, gin.H{
		"transactionID": transactionID,
		"landID":        tx.LandID,
		"message":       "Wallet ‡∏Ç‡∏≠‡∏á Buyer/Seller ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö history ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
		"history":       latestHistory,
	})
}
