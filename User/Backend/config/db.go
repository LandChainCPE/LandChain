package config

import (
	"errors"
	"fmt"
	"log"
	"os"
	"time"

	"landchain/entity"

	"github.com/joho/godotenv"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	//"time"
)

var db *gorm.DB

func DB() *gorm.DB {
	return db
}

func ConnectDatabase() *gorm.DB {
	// ‡πÇ‡∏´‡∏•‡∏î .env
	if err := godotenv.Load(); err != nil {
		log.Fatal("‚ùå Failed to load .env file")
	}

	// DSN
	dsn := fmt.Sprintf(
		"host=%s user=%s password=%s dbname=%s port=%s sslmode=disable TimeZone=Asia/Bangkok",
		os.Getenv("DB_HOST"),
		os.Getenv("DB_USER"),
		os.Getenv("DB_PASSWORD"),
		os.Getenv("DB_NAME"),
		os.Getenv("DB_PORT"),
	)

	// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ DB
	connection, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatal("‚ùå Failed to connect database:", err)
	}

	db = connection // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô global variable
	log.Println("‚úÖ Database Connected")
	return db
}

// ‚úÖ SetupDatabase: ‡∏ó‡∏≥ Drop Table, AutoMigrate, ‡πÅ‡∏•‡∏∞ Seed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
func SetupDatabase() {
	if DB == nil {
		log.Fatal("‚ùå Database connection not initialized. Please call ConnectDatabase() first.")
	}

	// AutoMigrate
	if err := db.AutoMigrate(
		&entity.Role{},
		&entity.Users{},
		&entity.Time{},
		&entity.Province{},
		&entity.Branch{},
		&entity.Booking{},
		&entity.Typetransaction{},
		&entity.Landtitle{},
		&entity.Landsalepost{},
		&entity.Transaction{},
		&entity.Photoland{},
		&entity.Roomchat{},
		&entity.Message{},
		&entity.Copyrequest{},
		&entity.LandProvinces{},
	); err != nil {
		log.Fatal("‚ùå AutoMigrate failed:", err)
	}

	// Seed Data
	var count int64
	db.Model(&entity.Users{}).Count(&count)
	if count == 0 {
		db.Create(&entity.Role{Role: "User"})
		db.Create(&entity.Role{Role: "Admin"})

		RefRole := uint(1)
		db.Create(&entity.Users{Name: "Jo", Email: "@good", Phonenumber: "0912345678", Password: "jo123456", Land: "12‡∏Å‡∏ó85", RoleID: RefRole})
		db.Create(&entity.Users{Name: "Aut", Email: "@goods", Phonenumber: "0912345679", Password: "Aut123456", Land: "‡∏ú‡∏´‡∏Å5‡∏õ58‡∏Å", RoleID: RefRole})
		db.Create(&entity.Users{Name: "Bam", Email: "@goods1", Phonenumber: "0912345677", Password: "1234564", Land: "‡∏ú‡∏´‡∏Å5‡∏õ58‡∏Å", RoleID: RefRole})

		db.Create(&entity.Time{Timework: "09:00 - 10:00"})
		db.Create(&entity.Time{Timework: "10:00 - 11:00"})
		db.Create(&entity.Time{Timework: "11:00 - 12:00"})
		db.Create(&entity.Time{Timework: "13:00 - 14:00"})
		db.Create(&entity.Time{Timework: "14:00 - 15:00"})
		db.Create(&entity.Time{Timework: "15:00 - 16:00"})

		db.Create(&entity.Province{Province: "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤"})
		db.Create(&entity.Province{Province: "‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ"})
		db.Create(&entity.Province{Province: "‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°"})

		RefProvince := uint(2)
		db.Create(&entity.Branch{Branch: "‡∏ô‡πâ‡∏≥‡∏¢‡∏∑‡∏ô", ProvinceID: RefProvince})

		//customDate, _ := time.Parse("2006-01-02", "2025-07-20")
		//db.Create(&entity.Booking{DateBooking: customDate, TimeID: uint(2), UserID: uint(2), BranchID: uint(1)})

		var provinces = []string{
			"‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£", "‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà", "‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ", "‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå", "‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£",
			"‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô", "‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ", "‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤", "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó",
			"‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥", "‡∏ä‡∏∏‡∏°‡∏û‡∏£", "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢", "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", "‡∏ï‡∏£‡∏±‡∏á",
			"‡∏ï‡∏£‡∏≤‡∏î", "‡∏ï‡∏≤‡∏Å", "‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å", "‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°", "‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°",
			"‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤", "‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä", "‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå", "‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™",
			"‡∏ô‡πà‡∏≤‡∏ô", "‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨", "‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå", "‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ", "‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå",
			"‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ", "‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ", "‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤", "‡∏û‡∏±‡∏á‡∏á‡∏≤", "‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á",
			"‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£", "‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å", "‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ", "‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå", "‡πÅ‡∏û‡∏£‡πà",
			"‡∏û‡∏∞‡πÄ‡∏¢‡∏≤", "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï", "‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°", "‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£", "‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô",
			"‡∏¢‡πÇ‡∏™‡∏ò‡∏£", "‡∏¢‡∏∞‡∏•‡∏≤", "‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î", "‡∏£‡∏∞‡∏ô‡∏≠‡∏á", "‡∏£‡∏∞‡∏¢‡∏≠‡∏á",
			"‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ", "‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ", "‡∏•‡∏≥‡∏õ‡∏≤‡∏á", "‡∏•‡∏≥‡∏û‡∏π‡∏ô", "‡πÄ‡∏•‡∏¢",
			"‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©", "‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£", "‡∏™‡∏á‡∏Ç‡∏•‡∏≤", "‡∏™‡∏ï‡∏π‡∏•", "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£",
			"‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°", "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£", "‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß", "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ", "‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ",
			"‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢", "‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ", "‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ", "‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå", "‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢",
			"‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π", "‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á", "‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ", "‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ", "‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå",
			"‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ", "‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç",
		}

		for _, name := range provinces {
			db.Create(&entity.LandProvinces{Name: name})
		}

		var count int64
		db.Model(&entity.LandProvinces{}).Count(&count)

		if count == 0 {
			for _, name := range provinces {
				db.Create(&entity.LandProvinces{Name: name})
			}
		}

	}

	// üî∏ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Landtitle ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
	var landtitle1, landtitle2 entity.Landtitle

	if err := db.Where("field = ?", "‡πÇ‡∏â‡∏ô‡∏î‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 000008 ‡πÅ‡∏õ‡∏•‡∏á 180").First(&landtitle1).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			landtitle1 = entity.Landtitle{
				Field:           "‡πÇ‡∏â‡∏ô‡∏î‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 000008 ‡πÅ‡∏õ‡∏•‡∏á 180",
				UserID:          1,
				LandProvincesID: 1,
			}
			db.Create(&landtitle1)
		}
	}

	if err := db.Where("field = ?", "‡πÇ‡∏â‡∏ô‡∏î‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 000009 ‡πÅ‡∏õ‡∏•‡∏á 264").First(&landtitle2).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			landtitle2 = entity.Landtitle{
				Field:           "‡πÇ‡∏â‡∏ô‡∏î‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 000009 ‡πÅ‡∏õ‡∏•‡∏á 264",
				UserID:          1,
				LandProvincesID: 1,
			}
			db.Create(&landtitle2)
		}
	}

	// üî∏ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Landsalepost ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
	var post1, post2 entity.Landsalepost

	if err := db.Where("num_of_land_title = ?", "180").First(&post1).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			post1 = entity.Landsalepost{
				Name:           "‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ",
				PhoneNumber:    "0812345678",
				NumOfLandTitle: "180",
				AdressLandplot: "‡∏ï.‡πÉ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤",
				Price:          260000.00,
				LandtitleID:    landtitle1.ID,
			}
			db.Create(&post1)
		}
	}

	if err := db.Where("num_of_land_title = ?", "264").First(&post2).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			post2 = entity.Landsalepost{
				Name:           "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ß‡∏¥‡∏†‡∏≤ ‡∏£‡∏±‡∏ï‡∏ô‡πå‡πÄ‡∏£‡∏∑‡∏≠‡∏á",
				PhoneNumber:    "0898765432",
				NumOfLandTitle: "264",
				AdressLandplot: "‡∏ï.‡∏´‡∏ô‡∏≠‡∏á‡∏à‡∏∞‡∏ö‡∏Å ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤",
				Price:          350000.00,
				LandtitleID:    landtitle2.ID,
			}
			db.Create(&post2)
		}
	}

	var post entity.Landsalepost
	if err := db.Where("num_of_land_title = ?", "180").First(&post).Error; err != nil {
		log.Println("‚ùå Cannot find Landsalepost with num_of_land_title = 180")
		return
	}

	// ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó
	userIDs := []uint{2, 3}

	for _, userID := range userIDs {
		// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ Roomchat ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
		var existingRoomchat entity.Roomchat
		err := db.Where("landsalepost_id = ? AND user_id = ?", post.ID, userID).First(&existingRoomchat).Error
		if err == nil {
			log.Println("‚ö†Ô∏è Roomchat already exists for UserID:", userID)
			continue
		}

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á Roomchat ‡πÉ‡∏´‡∏°‡πà
		roomchat := entity.Roomchat{
			LandsalepostID: post.ID,
			UserID:         userID,
		}

		if err := db.Create(&roomchat).Error; err != nil {
			log.Println("‚ùå Failed to create Roomchat for user", userID, ":", err)
			continue
		}
		log.Println("‚úÖ Created Roomchat for UserID:", userID, "RoomchatID:", roomchat.ID)

		// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó
		messages := []entity.Message{
			{
				Message:    "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏´‡∏°?",
				Time:       time.Now(),
				RoomchatID: roomchat.ID,
			},
			{
				Message:    "‡∏™‡∏ô‡πÉ‡∏à‡∏Ñ‡∏£‡∏±‡∏ö ‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏£‡∏≤‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
				Time:       time.Now().Add(1 * time.Minute),
				RoomchatID: roomchat.ID,
			},
			{
				Message:    "‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î 5 ‡πÑ‡∏£‡πà ‡∏£‡∏≤‡∏Ñ‡∏≤ 2 ‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó‡∏Ñ‡∏£‡∏±‡∏ö",
				Time:       time.Now().Add(2 * time.Minute),
				RoomchatID: roomchat.ID,
			},
		}

		if err := db.Create(&messages).Error; err != nil {
			log.Println("‚ùå Failed to create messages for UserID:", userID, ":", err)
		} else {
			log.Println("‚úÖ Created messages for UserID:", userID)
		}
	}
	

	log.Println("‚úÖ Database Migrated & Seeded Successfully")

}
