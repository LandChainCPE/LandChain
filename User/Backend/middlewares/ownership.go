package middlewares

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strconv"

	"landchain/config"
	"landchain/entity"

	"github.com/gin-gonic/gin"
)

// CheckOwnership ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏ó‡∏µ‡πà login ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
func CheckOwnership() gin.HandlerFunc {
	return func(c *gin.Context) {
		// ‡∏î‡∏∂‡∏á wallet ‡∏à‡∏≤‡∏Å JWT token (‡∏à‡∏≤‡∏Å Authorizes middleware)
		currentWallet, exists := c.Get("wallet")
		if !exists {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "Wallet not found in token"})
			return
		}

		db := config.DB()

		// ‡∏´‡∏≤ User ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà
		var currentUser entity.Users
		if err := db.Where("metamaskaddress = ?", currentWallet).First(&currentUser).Error; err != nil {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "User not found"})
			return
		}

		// ‡∏î‡∏∂‡∏á ID ‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á
		var requestedUserID string

		// 1. ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å URL parameters
		if id := c.Param("id"); id != "" {
			requestedUserID = id
		} else if userID := c.Param("userID"); userID != "" {
			requestedUserID = userID
		} else if userid := c.Param("userid"); userid != "" {
			requestedUserID = userid
		} else {
			// 2. ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Query parameters
			if id := c.Query("id"); id != "" {
				requestedUserID = id
			} else if userID := c.Query("userID"); userID != "" {
				requestedUserID = userID
			} else if userid := c.Query("userid"); userid != "" {
				requestedUserID = userid
			} else if userID := c.Query("user_id"); userID != "" {
				requestedUserID = userID
			} else {
				// 3. ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Request Body (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö POST/PUT requests)
				if c.Request.Method == "POST" || c.Request.Method == "PUT" || c.Request.Method == "PATCH" {
					// ‡∏≠‡πà‡∏≤‡∏ô body
					bodyBytes, err := io.ReadAll(c.Request.Body)
					if err == nil && len(bodyBytes) > 0 {
						// ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô body ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ controller ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
						c.Request.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))

						// Parse JSON
						var requestBody map[string]interface{}
						if err := json.Unmarshal(bodyBytes, &requestBody); err == nil {
							// ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å field ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô JSON
							if userID, ok := requestBody["user_id"]; ok {
								if userIDStr, ok := userID.(string); ok {
									requestedUserID = userIDStr
								} else if userIDFloat, ok := userID.(float64); ok {
									requestedUserID = strconv.Itoa(int(userIDFloat))
								}
							} else if userID, ok := requestBody["userID"]; ok {
								if userIDStr, ok := userID.(string); ok {
									requestedUserID = userIDStr
								} else if userIDFloat, ok := userID.(float64); ok {
									requestedUserID = strconv.Itoa(int(userIDFloat))
								}
							} else if userID, ok := requestBody["userId"]; ok {
								if userIDStr, ok := userID.(string); ok {
									requestedUserID = userIDStr
								} else if userIDFloat, ok := userID.(float64); ok {
									requestedUserID = strconv.Itoa(int(userIDFloat))
								}
							} else if id, ok := requestBody["id"]; ok {
								if idStr, ok := id.(string); ok {
									requestedUserID = idStr
								} else if idFloat, ok := id.(float64); ok {
									requestedUserID = strconv.Itoa(int(idFloat))
								}
							}
						}
					}
				}
			}
		}

		// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user ID = ‡πÄ‡∏õ‡πá‡∏ô endpoint ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ ownership
		if requestedUserID == "" {
			c.Next()
			return
		}

		// ‡πÅ‡∏õ‡∏•‡∏á string ‡πÄ‡∏õ‡πá‡∏ô int ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
		requestedID, err := strconv.Atoi(requestedUserID)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"error": "Invalid user ID format"})
			return
		}

		// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ ID ‡∏ó‡∏µ‡πà‡∏Ç‡∏≠ = ID ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
		if int(currentUser.ID) != requestedID {
			c.AbortWithStatusJSON(http.StatusForbidden, gin.H{"error": "Access denied: You can only access your own data"})
			return
		}

		// ‡πÄ‡∏Å‡πá‡∏ö current user ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô controller
		c.Set("currentUser", currentUser)

		// ‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
		c.Next()
	}
}








// CheckTokenOwnership ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ JWT token ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö endpoint ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å wallet ‡πÉ‡∏ô JWT token
func CheckTokenOwnership() gin.HandlerFunc {
	return func(c *gin.Context) {
		// ‡∏î‡∏∂‡∏á wallet ‡∏à‡∏≤‡∏Å JWT token (‡∏à‡∏≤‡∏Å Authorizes middleware)
		currentWallet, exists := c.Get("wallet")
		if !exists {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "Wallet not found in token"})
			return
		}

		db := config.DB()

		// ‡∏´‡∏≤ User ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà
		var currentUser entity.Users
		if err := db.Where("metamaskaddress = ?", currentWallet).First(&currentUser).Error; err != nil {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "User not found"})
			return
		}

		// ‡πÄ‡∏Å‡πá‡∏ö current user ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô controller
		c.Set("currentUser", currentUser)
		c.Set("currentUserID", int(currentUser.ID))

		// ‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
		c.Next()
	}
}




// CheckAdminRole ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡πÄ‡∏õ‡πá‡∏ô admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
func CheckAdminRole() gin.HandlerFunc {
	return func(c *gin.Context) {
		fmt.Printf("üöÄ CheckAdminRole: Middleware called for path: %s\n", c.FullPath())

		// ‡∏î‡∏∂‡∏á wallet ‡∏à‡∏≤‡∏Å JWT token
		currentWallet, exists := c.Get("wallet")
		if !exists {
			fmt.Println("‚ùå CheckAdminRole: Wallet not found in token")
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "Wallet not found in token"})
			return
		}

		fmt.Printf("üîç CheckAdminRole: Checking admin role for wallet: %v\n", currentWallet)

		db := config.DB()

		// ‡∏´‡∏≤ User ‡πÅ‡∏•‡∏∞ Role ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà
		var currentUser entity.Users
		if err := db.Preload("Role").Where("metamaskaddress = ?", currentWallet).First(&currentUser).Error; err != nil {
			fmt.Printf("‚ùå CheckAdminRole: User not found for wallet: %v, error: %v\n", currentWallet, err)
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "User not found"})
			return
		}

		fmt.Printf("üë§ CheckAdminRole: Found user ID: %d, RoleID: %d\n", currentUser.ID, currentUser.RoleID)

		// üéØ ‡πÄ‡∏ä‡πá‡∏Ñ RoleID ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (Admin = 2)
		if currentUser.RoleID != 2 {
			fmt.Printf("‚ùå CheckAdminRole: Access denied. User RoleID is %d, required 2 (Admin)\n", currentUser.RoleID)
			c.AbortWithStatusJSON(http.StatusForbidden, gin.H{
				"error":            "Access denied: Admin role required",
				"current_role_id":  currentUser.RoleID,
				"required_role_id": 2,
			})
			return
		}

		// ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ß‡πà‡∏≤ Role ‡∏ñ‡∏π‡∏Å preload ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)
		if currentUser.Role.ID == 0 {
			fmt.Printf("‚ö†Ô∏è CheckAdminRole: Role not preloaded, but RoleID %d is valid Admin\n", currentUser.RoleID)
		} else {
			fmt.Printf("üîë CheckAdminRole: User role: '%s' (Role ID: %d)\n", currentUser.Role.Role, currentUser.Role.ID)
		}

		fmt.Printf("‚úÖ CheckAdminRole: Admin access granted for user ID: %d (RoleID: %d)\n", currentUser.ID, currentUser.RoleID) // ‡πÄ‡∏Å‡πá‡∏ö current user ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô context
		c.Set("currentUser", currentUser)
		c.Set("isAdmin", true)

		// ‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
		c.Next()
	}
}

// CheckOwnershipOrAdmin ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô admin
func CheckOwnershipOrAdmin() gin.HandlerFunc {
	return func(c *gin.Context) {
		// ‡∏î‡∏∂‡∏á wallet ‡∏à‡∏≤‡∏Å JWT token
		currentWallet, exists := c.Get("wallet")
		if !exists {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "Wallet not found in token"})
			return
		}

		db := config.DB()

		// ‡∏´‡∏≤ User ‡πÅ‡∏•‡∏∞ Role ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà
		var currentUser entity.Users
		if err := db.Preload("Role").Where("metamaskaddress = ?", currentWallet).First(&currentUser).Error; err != nil {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "User not found"})
			return
		}

		// ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏•‡∏¢ (‡πÄ‡∏ä‡πá‡∏Ñ RoleID ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
		if currentUser.RoleID == 2 {
			fmt.Printf("‚úÖ CheckOwnershipOrAdmin: Admin access granted for user ID: %d (RoleID: %d)\n", currentUser.ID, currentUser.RoleID)
			c.Set("currentUser", currentUser)
			c.Set("isAdmin", true)
			c.Next()
			return
		}

		// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà admin ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ logic ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á CheckOwnership
		// ‡∏î‡∏∂‡∏á ID ‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á
		var requestedUserID string

		// 1. ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å URL parameters
		if id := c.Param("id"); id != "" {
			requestedUserID = id
		} else if userID := c.Param("userID"); userID != "" {
			requestedUserID = userID
		} else if userid := c.Param("userid"); userid != "" {
			requestedUserID = userid
		} else {
			// 2. ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Query parameters
			if id := c.Query("id"); id != "" {
				requestedUserID = id
			} else if userID := c.Query("userID"); userID != "" {
				requestedUserID = userID
			} else if userid := c.Query("userid"); userid != "" {
				requestedUserID = userid
			} else if userID := c.Query("user_id"); userID != "" {
				requestedUserID = userID
			} else {
				// 3. ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Request Body (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö POST/PUT requests)
				if c.Request.Method == "POST" || c.Request.Method == "PUT" || c.Request.Method == "PATCH" {
					// ‡∏≠‡πà‡∏≤‡∏ô body
					bodyBytes, err := io.ReadAll(c.Request.Body)
					if err == nil && len(bodyBytes) > 0 {
						// ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô body ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ controller ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
						c.Request.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))

						// Parse JSON
						var requestBody map[string]interface{}
						if err := json.Unmarshal(bodyBytes, &requestBody); err == nil {
							// ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å field ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô JSON
							if userID, ok := requestBody["user_id"]; ok {
								if userIDStr, ok := userID.(string); ok {
									requestedUserID = userIDStr
								} else if userIDFloat, ok := userID.(float64); ok {
									requestedUserID = strconv.Itoa(int(userIDFloat))
								}
							} else if userID, ok := requestBody["userID"]; ok {
								if userIDStr, ok := userID.(string); ok {
									requestedUserID = userIDStr
								} else if userIDFloat, ok := userID.(float64); ok {
									requestedUserID = strconv.Itoa(int(userIDFloat))
								}
							} else if userID, ok := requestBody["userId"]; ok {
								if userIDStr, ok := userID.(string); ok {
									requestedUserID = userIDStr
								} else if userIDFloat, ok := userID.(float64); ok {
									requestedUserID = strconv.Itoa(int(userIDFloat))
								}
							} else if id, ok := requestBody["id"]; ok {
								if idStr, ok := id.(string); ok {
									requestedUserID = idStr
								} else if idFloat, ok := id.(float64); ok {
									requestedUserID = strconv.Itoa(int(idFloat))
								}
							}
						}
					}
				}
			}
		}

		// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user ID = ‡πÄ‡∏õ‡πá‡∏ô endpoint ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ ownership
		if requestedUserID == "" {
			c.Set("currentUser", currentUser)
			c.Set("isAdmin", false)
			c.Next()
			return
		}

		// ‡πÅ‡∏õ‡∏•‡∏á string ‡πÄ‡∏õ‡πá‡∏ô int ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
		requestedID, err := strconv.Atoi(requestedUserID)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"error": "Invalid user ID format"})
			return
		}

		// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ ID ‡∏ó‡∏µ‡πà‡∏Ç‡∏≠ = ID ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
		if int(currentUser.ID) != requestedID {
			c.AbortWithStatusJSON(http.StatusForbidden, gin.H{"error": "Access denied: You can only access your own data"})
			return
		}

		// ‡πÄ‡∏Å‡πá‡∏ö current user ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô context
		c.Set("currentUser", currentUser)
		c.Set("isAdmin", false)

		// ‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
		c.Next()
	}
}
