package middlewares

import (
	"fmt"
	"net/http"
	"os"
	"strings"

	"landchain/services"

	"github.com/gin-gonic/gin"
)

func Authorizes() gin.HandlerFunc {
	return func(c *gin.Context) {
		fmt.Printf("üöÄ Authorizes: Middleware called for path: %s\n", c.FullPath())

		clientToken := c.Request.Header.Get("Authorization")
		if clientToken == "" {
			fmt.Println("‚ùå Authorizes: No Authorization header provided")
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "No Authorization header provided"})
			return
		}

		// ‚úÖ ‡∏î‡∏∂‡∏á Bearer token ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
		extractedToken := strings.Split(clientToken, "Bearer ")
		if len(extractedToken) != 2 {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "Incorrect Format of Authorization Token"})
			return
		}
		clientToken = strings.TrimSpace(extractedToken[1])

		// ‚úÖ ‡πÉ‡∏ä‡πâ JwtWrapper validate
		jwtWrapper := services.JwtWrapper{
			SecretKey:       os.Getenv("JWT_SECRET"),
			Issuer:          os.Getenv("JWT_ISSUER"),
			ExpirationHours: 1,
		}

		claims, err := jwtWrapper.ValidateToken(clientToken)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": err.Error()})
			return
		}

		if claims == nil || claims.Wallet == "" {  // ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏ô‡∏µ‡πâ‡∏ô‡∏±‡πâ‡∏ô claims ‡∏Ñ‡∏∑‡∏≠ object ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î JWT (decode/validate) ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô JwtWrapper ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ SecretKey Issuer ExpirationHours ‡∏™‡∏≤‡∏°‡∏≤‡∏ñ‡πÉ‡∏ä‡πâ . ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
			fmt.Printf("‚ùå Authorizes: Invalid token claims - claims: %+v\n", claims)
			c.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"error": "Invalid token claims"})
			return
		}
		fmt.Printf("üîë JWT Claims Wallet: %s\n", claims.Wallet)
		// ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö wallet ‡∏•‡∏á context
		c.Set("wallet", claims.Wallet)

		fmt.Println("‚úÖ Token validated for wallet:", claims.Wallet)
		c.Next()
	}
}




// ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ß‡πà‡∏≤ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á Request ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏ó‡∏µ‡πà Authorizes ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å c.Set   wallet
// ‡πÅ‡∏•‡πâ‡∏ß Controller ‡∏ô‡∏∞‡∏±‡∏±‡πâ‡πÄ‡∏ô‡∏à‡∏∞ ‡πÉ‡∏ä‡πâ c.Get ‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ walletid ‡∏Ç‡∏≠‡∏áRequest ‡∏ô‡∏±‡πâ‡∏ô  ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà c.Set("wallet", claims.Wallet) ‡∏°‡∏±‡∏ô‡∏Å‡πá‡∏ï‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà User ‡∏™‡πà‡∏á‡∏°‡∏≤‡∏™‡∏¥


// ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà c.Set("wallet", claims.Wallet) ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞ request ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô

// ‡∏ó‡∏∏‡∏Å request ‡πÉ‡∏´‡∏°‡πà (‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà user ‡∏™‡πà‡∏á‡∏°‡∏≤) ‡∏à‡∏∞‡∏°‡∏µ context ‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
// middleware Authorizes ‡∏à‡∏∞ decode JWT ‡∏Ç‡∏≠‡∏á request ‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß set wallet address ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á request ‡∏ô‡∏±‡πâ‡∏ô‡∏•‡∏á context
// controller ‡πÉ‡∏ä‡πâ c.Get("wallet") ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á wallet address ‡∏Ç‡∏≠‡∏á request ‡∏ô‡∏±‡πâ‡∏ô‡πÜ



